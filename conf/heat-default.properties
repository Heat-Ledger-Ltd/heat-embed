# Do not modify this file. Instead, create a heat.properties file with only the properties
# you need to change, and set them there. The values in heat.properties override those in
# heat-default.properties.

# HEAT version
heat.version=2.0.0

### MICRO SERVICES ###

# Wheter or not to enable microservices
heat.microservicesEnabled=false

# The name of the microservices config file, this is located in conf/microservices.json
heat.microservicesFile=microservices.json

# The name of the testnet microservices config file, this is located in conf/microservices-test.json
heat.microservicesFileTestnet=microservices-test.json

#### API SERVER ####

# Accept http/json API requests.
heat.enableAPIServer=true

# The host where swagger will look for swagger.json, must include the port number
heat.swaggerHost=localhost:7733
#heat.swaggerHost="alpha.heatledger.com:7733"

# Hosts from which to allow http/json API requests, if enabled. Set to * to allow all.
# Can also specify networks in CIDR notation, e.g. 192.168.1.0/24.
heat.allowedBotHosts=127.0.0.1; localhost; [0:0:0:0:0:0:0:1];

# Port for http/json API requests.
heat.apiServerPort=7733
heat.apiSSLServerPort=7734

# Host interface on which to listen for http/json API request, default localhost only.
# Set to 0.0.0.0 to allow the API server to accept requests from all network interfaces.
heat.apiServerHost=127.0.0.1

# Idle timeout for http/json API request connections, milliseconds.
heat.apiServerIdleTimeout=30000

# Enable Cross Origin Filter for the API server.
heat.apiServerCORS=false

# Enable SSL for the API server (also need to set heat.keyStorePath and heat.keyStorePassword).
heat.apiSSL=false

# Enforce requests that require POST to only be accepted when submitted as POST.
heat.apiServerEnforcePOST=true

# API key that has to be provided when executing protected (administrative) API requests.
# If no admin key is defined administrative API's will be disabled and return an error
# when accessed.
heat.apiKey=

# Set to true to disable api key protection for admin API requests even when API server
# is publicly accessible. Not recommended.
heat.apiKeyDisabled=false

#### WEBSOCKET SERVER ####

# Enables the websocket server
heat.enableWebsockets=false

# Port for websocket server
heat.websocketServerPort=7755

# Host interface on which to listen for websocket connections
heat.websocketServerHost=127.0.0.1

#### SYSTEM MESSAGES ####

# Through system messages you allow heatledger to send you messages that either display
# a public announcement in your heat server log and you allow heatledger to send you
# updates about version updates and version blacklistings.
# When enabled and you are running an older version heat will shutdown and
# print a message to your console or server logs which states where you can download
# an updated version 
heat.systemMessagesEnabled=true

#### REPLICATOR ####

# The replication database uses HikariCP connection pool on which the 
# configuration settings are based.
# See this https://github.com/brettwooldridge/HikariCP#configuration-knobs-baby
# for more information about the various connection settings.

# The replication database can be any supported RDBMS for which a heat.replicate.*
# package is available.
# Enable replication by setting this property to true
heat.replicatorEnabled=false

# Replicators can locally store files, if provided those files are stored in the
# relative path defined in this property.
heat.replicatorArtifactDir=heat_artifacts

# Currently supported RDBMS vendors: H2 (MYSQL support is underway)
heat.replicatorDbEngine=H2
#heat.replicatorDbEngine=MYSQL

# Replication db JDBC connection URL (defaults to H2)
heat.replicatorJdbcUrlH2=jdbc:h2:./heat_db/heat_replicator;DB_CLOSE_ON_EXIT=FALSE;MVCC=FALSE;MV_STORE=FALSE;MODE=MySQL
heat.replicatorJdbcUrlMYSQL=jdbc:mysql://localhost/heat_db?user=sqluser&password=sqluserpw

# Sets the default authentication username used when obtaining Connections from 
# the underlying driver
heat.replicatorUsernameH2=sqluser
heat.replicatorUsernameMYSQL=sqluser

# Sets the default authentication password used when obtaining Connections from 
# the underlying driver
heat.replicatorPasswordH2=sqluserpw
heat.replicatorPasswordMYSQL=sqluserpw

# The maximum number of milliseconds that a client (that's you) will wait for a 
# connection from the pool. If this time is exceeded without a connection becoming 
# available, a SQLException will be thrown. 1000ms is the minimum value. Default: 30000 (30 seconds)
heat.replicatorConnectionTimeoutH2=30000
heat.replicatorConnectionTimeoutMYSQL=30000

# Controls the maximum amount of time that a connection is allowed to sit idle in the pool. 
# Whether a connection is retired as idle or not is subject to a maximum variation of 
# +30 seconds, and average variation of +15 seconds. A connection will never be retired 
# as idle before this timeout. A value of 0 means that idle connections are never removed 
# from the pool. Default: 600000 (10 minutes)
heat.replicatorIdleTimeoutH2=600000
heat.replicatorIdleTimeoutMYSQL=600000

# Controls the maximum lifetime of a connection in the pool. When a connection reaches 
# this timeout it will be retired from the pool, subject to a maximum variation of +30 seconds. 
# An in-use connection will never be retired, only when it is closed will it then be removed. 
# We strongly recommend setting this value, and it should be at least 30 seconds less than any 
# database-level connection timeout. A value of 0 indicates no maximum lifetime (infinite lifetime), 
# subject of course to the idleTimeout setting. Default: 1800000 (30 minutes)
heat.replicatorMaxLifetimeH2=1800000
heat.replicatorMaxLifetimeMYSQL=1800000

# Controls the minimum number of idle connections that HikariCP tries to maintain in the pool. 
# If the idle connections dip below this value, HikariCP will make a best effort to add additional 
# connections quickly and efficiently. However, for maximum performance and responsiveness to spike demands, 
# we recommend not setting this value and instead allowing HikariCP to act as a fixed size connection pool. 
# Default: same as maximumPoolSize
heat.replicatorMinimumIdleH2=10
heat.replicatorMinimumIdleMYSQL=10

# Controls the maximum size that the pool is allowed to reach, including both idle and in-use connections. 
# Basically this value will determine the maximum number of actual connections to the database backend. 
# A reasonable value for this is best determined by your execution environment. 
# When the pool reaches this size, and no idle connections are available, calls to getConnection() 
# will block for up to connectionTimeout milliseconds before timing out. Default: 10
heat.replicatorMaximumPoolSizeH2=10
heat.replicatorMaximumPoolSizeMYSQL=10

# Official Free Public name assigner account
heat.replicatorFreeNameAssignerAccount=14439304480879065693
heat.replicatorFreeNameAssignerAccountTest=4729421738299387565

#### LEGACY API - REQUIRES INCLUSION OF `heatledger-legacy-*.*.*.jar` #######

# Heat legacy API offers an NXT compatible API of a selected set of NXT API's to
# accommodate existing application operators to hook-in HEAT technology easily using 
# existing NXT based sysyems.
#
# Not all API's are included in the legacy API if you or your organization requires
# one or more specific NXT based API's please contact us at support@heatledger.com
# to discuss the possibilities of adding your missing API.
#
# Currently we provide compatibility for the following NXT API's, this includes
# messages and encryptedMessages
#
#   - getAccountId
#   - getBalance
#   - getBlockId
#   - getBlocks
#   - getTransaction
#   - sendMoney
#   - getBlockchainTransactions (requires heat.replicatorEnabled=true)
#

# Enable the legacy API
heat.legacy.enableAPIServer=false
heat.legacy.allowedBotHosts=127.0.0.1; localhost; [0:0:0:0:0:0:0:1];
heat.legacy.apiServerPort=7799
heat.legacy.apiServerHost=127.0.0.1
heat.legacy.apiSSL=false
heat.legacy.keyStorePath=keystore
heat.legacy.keyStorePassword=password
heat.legacy.apiServerIdleTimeout=30000
heat.legacy.enableAPIServerGZIPFilter=false
heat.legacy.apiServerCORS=false

#### PEER NETWORKING ####

# Announce my IP address/hostname to peers and allow them to share it with other peers.
# If disabled, peer networking servlet will not be started at all.
heat.shareMyAddress=true

# Port for incoming peer to peer networking requests, if enabled.
heat.peerServerPort=7744
heat.peerServerPortTest=7745

# Host interface on which to listen for peer networking requests, default all.
# Use 0.0.0.0 to listen on all IPv4 interfaces or :: to listen on all IPv4 and IPv6 interfaces
heat.peerServerHost=0.0.0.0

# My externally visible IP address or host name, to be announced to peers.
# It can optionally include a port number, which will also be announced to peers,
# and may be different from heat.peerServerPort (useful if you do port forwarding behind a router).
heat.myAddress=

# My platform, to be announced to peers.
heat.myPlatform=PC

# My hallmark, if available.
heat.myHallmark=

# A list of well known peer addresses / host names, separated by '; '.
heat.wellKnownPeers=78.46.99.11;78.46.176.8;178.63.0.72;144.76.3.50;188.166.27.145;198.211.122.170;\
138.197.100.15;188.166.3.190;37.139.25.130;128.199.37.111;138.197.113.53;138.197.113.52;

heat.wellKnownPeersTest=176.9.102.212;95.85.4.150;146.185.154.55

# Known bad peers to be blacklisted
heat.knownBlacklistedPeers=

# Maintain active connections with at least that many peers.
heat.maxNumberOfConnectedPublicPeers=500

# Stop adding new peers when number of known peers exceeds that many.
heat.maxNumberOfKnownPeers=1000

# Stop removing old peers when number of known peers drops below that many.
heat.minNumberOfKnownPeers=1000

# Peer networking connect timeout for outgoing connections.
heat.connectTimeout=10000

# Peer networking read timeout for outgoing connections.
heat.readTimeout=20000

# Peer networking server idle timeout, milliseconds.
heat.peerServerIdleTimeout=30000

# Use the peer hallmark to only connect with peers above the defined push/pull hallmark thresholds.
# Disabling hallmark protection also disables weighting of peers by hallmark weight, so connecting
# to any of your peers becomes equally likely.
heat.enableHallmarkProtection=true

# Hallmark threshold to use when sending data to peers.
heat.pushThreshold=0

# Hallmark threshold to use when requesting data from peers.
heat.pullThreshold=0

# Blacklist peers for 600000 milliseconds (i.e. 10 minutes by default).
heat.blacklistingPeriod=600000

# Consider a new transaction or block sent after 10 peers have received it.
heat.sendToPeersLimit=10

# Enable the Jetty Denial of Service Filter for the peer networking server.
heat.enablePeerServerDoSFilter=true

# Use testnet, leave set to false unless you are really testing.
heat.isTestnet=false

# Save known peers in the database
heat.savePeers=true

# Set to false to disable use of the peers database. This will not delete saved peers.
heat.usePeersDb=true

# Set to false to disable getting more peers from the currently connected peers. Only useful
# when debugging and want to limit the peers to those in peersDb or wellKnownPeers.
heat.getMorePeers=true

# Set to true to run offline - do not connect to peers and do not listen for incoming peer
# connections. This is equivalent to setting heat.shareMyAddress=false, heat.wellKnownPeers=,
# heat.testnetPeers= and heat.usePeersDb=false, and if set to true overrides those properties.
heat.isOffline=false

# Enable re-broadcasting of new transactions until they are received back from at least one
# peer, or found in the blockchain. This feature can optionally be disabled, to avoid the
# risk of revealing that this node is the submitter of such re-broadcasted new transactions.
heat.enableTransactionRebroadcasting=true

# Verify batches of blocks downloaded from a single peer with that many other peers.
heat.numberOfForkConfirmations=2

#### DEBUGGING ####

# Include caller traceback in log messages.
heat.enableLogTraceback=false

# Enable logging of exception stack traces.
heat.enableStackTraces=true

# Used for debugging peer to peer communications.
heat.communicationLoggingMask=0

#### PERSISTANCE/BLOCKCHAIN ####

# If you put your secret phrase there without quotes and all on one line on 
# startup your server will start forging with that account. 
# A WORD OF CAUTION !! 
# If used anyone of course knows where to look for your secret phrase. 
# So use with caution, when balance leasing is up this can be used more responsibly.
#heat.startForging=

# Folder that stores all blockchain data
heat.blockchainDir=blockchain

# For testing purposes only
heat.deleteBlockchainDirOnExit=false

# Folder that stores all testnet blockchain data
heat.testBlockchainDir=blockchain-test

# Genesis file, has to be on classpath
heat.genesisFile=genesis.json
heat.genesisFileTestnet=genesis-test.json

#### JETTY ####

# Settings for the Jetty Denial Of Service Filter, used for the peer networking server only.
heat.peerServerDoSFilter.maxRequestsPerSec=30
heat.peerServerDoSFilter.delayMs=1000
heat.peerServerDoSFilter.maxRequestMs=300000

# keystore file and password, required if uiSSL or apiSSL are enabled.
heat.keyStorePath=keystore
heat.keyStorePassword=password

#### Developers only ####

# Force re-validation of blocks and transaction at start.
heat.forceValidate=false

# Force re-build of derived objects tables at start.
heat.forceScan=false

# Print a list of peers having this version on exit.
heat.dumpPeersVersion=

# Microservices environment for testing. Overrides by command line.
# Loading priority microservice configuration: 1) command line, 2) these settings, 3) microservice-test.json or microservice.json
# Example for Windows: "microservice.path=c:/heat-dev-kit/dist"
# The setting "microservice.run" should be set in the test, and here leave blank.
# If these settings are defined, in the java test can be run a concrete microservice function
# by defining setting "microservice.run" when setup blockchain, e.g. "microservice.run=microservice.sample.test()"
microservice.path=
microservice.sourcedir=
microservice.run=

# Scale epoch time for faster forging. Only works when offline.
# heat.timeMultiplier=1

#### DEBUG #####

# File name for logging tracked account balances.
heat.debugTraceLog=account-trace.csv

# Separator character for trace log.
heat.debugTraceSeparator=\t

# Quote character for trace log.
heat.debugTraceQuote="

# Log changes to unconfirmed balances.
heat.debugLogUnconfirmed=false
